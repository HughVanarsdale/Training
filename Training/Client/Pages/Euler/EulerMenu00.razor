@page "/Euler/EulerMenu00"
@using System.Diagnostics;
@using hjva;

<EulerHeader Title="Euler Page One"></EulerHeader>

<div class="accordion" id="accordionExample">

    <!-- Question 1 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                <strong>1) Multiples of 3 and 5</strong>
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <button class="pushable" onclick="@EulerOne">
                    <span class="front">
                        Find the sum of all multiples of 3 or 5 below 1000
                    </span>
                </button>
                <div class="answer">
                    @Euler[0] @elapsedTime[0]
                </div>
            </div>
        </div>
    </div>

    <!-- Question 2 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <strong>2) Even Fibonacci Numbers</strong>
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
                1 and 2, the first 10 terms will be:
                <br /><center><code>1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code></center><br />
                By considering the terms in the Fibonacci sequence whose values do not exceed four million
                <br /><br />
                <button class="pushable" onclick="@EulerTwo">
                    <span class="front">
                        find the sum of the even-valued terms.
                    </span>
                </button>
                <div class="answer">@Euler[1] @elapsedTime[1]</div>
            </div>
        </div>
    </div>

    <!-- Question 3 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                <strong>3) Largest Prime Factor</strong>
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                The prime factors of 13195 are <code>5, 7, 13, 29</code>.
                <br /><br />
                <button class="pushable" onclick="@EulerThree">
                    <span class="front">
                        What is the largest prime factor of the number 600,851,475,143.0
                    </span>
                </button>
                <div class="answer">@EulerLong[2] @elapsedTime[2]</div>
            </div>
        </div>
    </div>
    <!-- Question 4 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingFour">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                <strong>4) Largest Palindrome Product</strong>
            </button>
        </h2>
        <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                A palindromic number reads the same both ways.<br />
                The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
                <br /><br />
                <button class="pushable" onclick="@EulerFour">
                    <span class="front">
                        Find the largest palindrome made from the product of two 3-digit numbers.
                    </span>
                </button>
                <div class="answer">@Euler[3] @elapsedTime[3]</div>
            </div>
        </div>
        <!-- Question 5 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFive">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    <strong>5) Smallest Multiple</strong>
                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse" aria-labelledby="headingFive" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
                    <br /><br />
                    <button class="pushable" onclick="@EulerFive">
                        <span class="front">
                            What is the smallest positive number that is <strong>evenly divisible</strong> by all the numbers from 1 to 20
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[4] @elapsedTime[4]</div>
                </div>
            </div>
        </div>
        <!-- Question 6 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSix">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="false" aria-controls="collapseSix">
                    <strong>6) Sum Square Difference</strong>
                </button>
            </h2>
            <div id="collapseSix" class="accordion-collapse collapse" aria-labelledby="headingSix" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    The sum of the squares of the first 10 natural numbers is 1<sup>2</sup> + 2<sup>2</sup> ...  + 10<sup>2</sup> = 385
                    <br /><br />
                    The square of the sum of the first 10 natural numbers is (1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 23025
                    <br /><br />
                    Hence the difference between the sum of the squares of the first ten natural numbers and
                    the square of that sum is: 3025 - 385 = 2640.
                    <br /><br />
                    <button class="pushable" onclick="@EulerSix">
                        <span class="front">
                            Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[5] @elapsedTime[5]</div>
                </div>
            </div>
        </div>
        <!-- Question 7 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSeven">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeven" aria-expanded="false" aria-controls="collapseSeven">
                    <strong>7) 10,001<sup>st</sup> Prime</strong>
                </button>
            </h2>
            <div id="collapseSeven" class="accordion-collapse collapse" aria-labelledby="headingSeven" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    By listing the first six prime numbers: 2, 3, 5, 7, 11, 13, we can see that the 6<sup>th</sup> prime is 13.
                    <br /><br />
                    <button class="pushable" onclick="@EulerSeven">
                        <span class="front">
                            what is he 10,001<sup>th</sup> prime number.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[6] @elapsedTime[6]</div>
                </div>
            </div>
        </div>
        <!-- Question 8 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingEight">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseEight" aria-expanded="false" aria-controls="collapseEight">
                    <strong>8) Largest Product in a Series</strong>
                </button>
            </h2>
            <div id="collapseEight" class="accordion-collapse collapse" aria-labelledby="headingEight" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    The four adjacent digits in the 1000 digit number that have the greatest product is 9 * 9 * 8 * 9 = 5832.
                    (huge number goes here...)
                    <br /><br />
                    <button class="pushable" onclick="@EulerEight">
                        <span class="front">
                            Find the thirteen adjacent digits in the 1000 digit number that have the greatest product.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[7] @elapsedTime[7]</div>
                </div>
            </div>
        </div>
        <!-- Question 9 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingNine">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseNine" aria-expanded="false" aria-controls="collapseNine">
                    <strong>9) Special Pythagorean Triplet</strong>
                </button>
            </h2>
            <div id="collapseNine" class="accordion-collapse collapse" aria-labelledby="headingNine" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    A Pythaorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>
                    <br />
                    For example 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>
                    <br />
                    There exists exactly one Pythagorean triplet for which a + b + c = 1000
                    <br /><br />
                    <button class="pushable" onclick="@EulerNine">
                        <span class="front">
                            Find the product abc.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[8] @elapsedTime[8]</div>
                </div>
            </div>
        </div>
        <!-- Question 10 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTen">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTen" aria-expanded="false" aria-controls="collapseTen">
                    <strong>10) Summation of Primes</strong>
                </button>
            </h2>
            <div id="collapseTen" class="accordion-collapse collapse" aria-labelledby="headingTen" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    The sum of primes below 10 is 2 + 3 + 5 + 7 = 17
                    <br /><br />
                    <button class="pushable" onclick="@EulerTen">
                        <span class="front">
                            Find the sum of all the primes below two million
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[9] @elapsedTime[9]</div>
                </div>
            </div>
        </div>
    </div>
</div>

<EulerNav/>

<style>
</style>

@code {
    private int[] Euler = new int[10];
    private long[] EulerLong = new long[10];
    private string[] elapsedTime = new string[10];

    private void EulerTen()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        long finish = 0;

        //bool[] primes = zzhjvaMath.SieveOfEratosthenes(2000000);
        bool[] primes = hjvaMath.SieveOfEratosthenes(2000000);

        for (int j = 0; j < primes.Length; j++)
        {
            if (primes[j])
            {
                finish += j;

                //Console.Write(j + ", ");
            }
        }
        EulerLong[9] = finish;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[9] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerNine()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        EulerLong[8] = 0;
        for (int c = 1; c < 1000; c++)
        {
            for (int b = 1; b + c < 1000; b++)
            {
                int a = 1000 - c - b;
                if (Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c, 2))
                {
                    EulerLong[8] = a * b * c;
                    c = 1000;
                    break;
                }
            }
        }

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[8] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerEight()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();

        const int OFFSET = 13;

        string hugeNum = "73167176531330624919225119674426574742355349194934" +
                            "96983520312774506326239578318016984801869478851843" +
                            "85861560789112949495459501737958331952853208805511" +
                            "12540698747158523863050715693290963295227443043557" +
                            "66896648950445244523161731856403098711121722383113" +
                            "62229893423380308135336276614282806444486645238749" +
                            "30358907296290491560440772390713810515859307960866" +
                            "70172427121883998797908792274921901699720888093776" +
                            "65727333001053367881220235421809751254540594752243" +
                            "52584907711670556013604839586446706324415722155397" +
                            "53697817977846174064955149290862569321978468622482" +
                            "83972241375657056057490261407972968652414535100474" +
                            "82166370484403199890008895243450658541227588666881" +
                            "16427171479924442928230863465674813919123162824586" +
                            "17866458359124566529476545682848912883142607690042" +
                            "24219022671055626321111109370544217506941658960408" +
                            "07198403850962455444362981230987879927244284909188" +
                            "84580156166097919133875499200524063689912560717606" +
                            "05886116467109405077541002256983155200055935729725" +
                            "71636269561882670428252483600823257530420752963450";
        long maxVal = 0;
        for (int i = 0; i < hugeNum.Length - OFFSET; i++)
        {
            long curTotal = 1;
            for (int j = i; j < i + OFFSET; j++)
            {
                curTotal *= hugeNum[j] - '0';
            }
            if (curTotal > maxVal)
            {
                maxVal = curTotal;
            }
        }
        //"73167176531330624919225119674426574742355349194934" +
        EulerLong[7] = maxVal;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[7] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

        // Want 5832 for 4 digits.
    }

    private void EulerSeven()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();
        int cntPrimes = 0;
        int cnt = 1;
        do
        {
            //if (zzhjvaMath.isPrime(cnt++))
            if (hjvaMath.isPrime(cnt++))
                {
                cntPrimes++;
            }
        } while (cntPrimes <= 10001);

        EulerLong[6] = cnt - 1;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[6] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }
    private void EulerSix()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();

        long SumOfSquares = 0;
        long SquareOfSums = 0;

        for (int i = 1; i <= 100; i++)
        {
            SumOfSquares += (long)Math.Pow(i, 2);
            SquareOfSums += i;
        }
        SquareOfSums = (long)Math.Pow(SquareOfSums, 2);

        EulerLong[5] = SquareOfSums - SumOfSquares;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[5] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerFive()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        EulerLong[4] = 1;

        List<long> allPrimes = new();
        long[] curPrimes;
        long singleGreatestTerm;

        // 2520 is the value for 1 to 10
        for (int i = 20; i > 1; i--)
        {
            singleGreatestTerm = 0;
            //curPrimes = zzhjvaMath.primeFactors((long)i);
            curPrimes = hjvaMath.primeFactors((long)i);
            foreach (long p in curPrimes)
            {
                int cnt = curPrimes.Count(x => x == p);
                if (cnt == 1)
                {
                    if (p > singleGreatestTerm)
                    {
                        singleGreatestTerm = p;
                    }
                }
                else
                {
                    long powered = (long)Math.Pow(p, cnt);
                    if (powered > singleGreatestTerm)
                    {
                        singleGreatestTerm = powered;
                    }
                }
            }
            bool found = false;
            foreach (long aP in allPrimes)
            {
                if (aP == singleGreatestTerm)
                {
                    found = true;
                    break;
                }
                if (aP % singleGreatestTerm == 0)
                {
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                allPrimes.Add(singleGreatestTerm);
            }

        }

        foreach (long lng in allPrimes)
        {
            EulerLong[4] *= lng;
        }

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[4] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

    }
    private void EulerFour()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        int topVal = 0;
        for (int i = 999; i > 0; i--)
        {
            for (int j = 999; j > 0; j--)
            {
                //if (zzhjvaMath.isPalindrome((i * j).ToString()))
                 if (hjvaMath.isPalindrome((i * j).ToString()))
                    {
                    if (i * j > topVal)
                    {
                        topVal = i * j;
                    }
                }
            }
        }

        Euler[3] = topVal;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[3] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }

    private void EulerThree()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        //long[] vals = General.zzhjvaMath.primeFactors(600851475143);
        long[] vals = hjvaMath.primeFactors(600851475143);
        long largest = 0;
        foreach (long l in vals)
        {
            if (l > largest)
            {
                largest = l;
            }
        }
        EulerLong[2] = largest;
        //Thread.Sleep(5000);

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[2] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }

    private void EulerTwo()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        Euler[1] = 2;

        int first = 1;
        int second = 2;
        int cur = 0;
        do
        {
            cur = first + second;
            if (cur % 2 == 0)
            {
                Euler[1] += cur;
            }
            first = second;
            second = cur;
        } while (cur <= 4000000);

        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[1] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerOne()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();

        Euler[0] = 0;
        for (int i = 1; i < 1000; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                Euler[0] += i;
            }
        }
        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[0] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }
}
