@page "/Euler/EulerMenu"
@using System.Diagnostics;
@using Training.Client.General;

<h3>Euler Problems

</h3>

<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingOne">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        1) Multiples of 3 and 5
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <button class="Btn" onclick="@EulerOne">Find the sum of all multiples of 3 or 5 below 1000</button>: <strong>@Euler[0]</strong> @elapsedTime[0]
      </div>
    </div>
  </div>
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingTwo">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
            2) Even Fibonacci Numbers
      </button>
    </h2>
    <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
      <div class="accordion-body">
            Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
            1 and 2, the first 10 terms will be:
                <br /><center><code>1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code></center><br/>
            <button class="Btn" onclick="@EulerTwo">
                By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
                find the sum of the even-valued terms.</button>: <strong>@Euler[1]</strong> @elapsedTime[1]
      </div>
    </div>
  </div>
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingThree">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
        3) Largest Prime Factor
      </button>
    </h2>
    <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        The prime factors of 13195 are <code>5, 7, 13, 29</code>.
        <br/><br/>
        <button class="Btn" onclick="@EulerThree">
           What is the largest prime factor of the number 600851475143</button>:  <strong>@EulerLong[2]</strong> @elapsedTime[2]
      </div>
    </div>
  </div>
</div>
<style>
    .accordion-body{
        background-color:cyan;
    }
    .accordion-item{
        background-color: cyan;
        border-width: 1px;
    }
    .accordion{
        background-color: cyan;
        border-width: 5px;
    }
    .Btn{
        color: white;
        background-color: deepskyblue;
        border-radius: 12px;
        border: none;
        cursor: pointer;
        outline-offset: 4px;
    }
</style>
@code {
    private int[] Euler = new int[10];
    private long[] EulerLong = new long[10];
    private string[] elapsedTime = new string[10];

    private void EulerThree()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();

        long[] vals = General.hjvaMath.primeFactors(600851475143);
        long largest = 0;
        foreach (long l in vals)
        {
            if (l > largest)
            {
                largest = l;
            }
        }
        EulerLong[2] = largest;

        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[2] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }

    private void EulerTwo()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        Euler[1] = 2;

        int first = 1;
        int second = 2;
        int cur = 0;
        do
        {
            cur = first + second;
            if (cur % 2 == 0)
            {
                Euler[1] += cur;
            }
            first = second;
            second = cur;
        } while (cur <= 4000000);

        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        //elapsedTime[1] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
        //elapsedTime[1] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
        elapsedTime[1] = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",
            ts.Hours, ts.Minutes, ts.Seconds,
            ts.Milliseconds / 10);
    }

    private void EulerOne()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();

        Euler[0] = 0;
        for (int i = 1; i < 1000; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                Euler[0] += i;
            }
        }
        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[0] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }
}
