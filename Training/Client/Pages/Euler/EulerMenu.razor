@page "/Euler/EulerMenu"
@using System.Diagnostics;
@using Training.Client.General;

<h3>
    Euler Problems

</h3>

<div class="accordion" id="accordionExample">

    <!-- Question 1 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                <strong>1) Multiples of 3 and 5</strong>
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <button class="pushable" onclick="@EulerOne">
                    <span class="front">
                        Find the sum of all multiples of 3 or 5 below 1000
                    </span>
                </button>
                <div class="answer">
                    @Euler[0] @elapsedTime[0]
                </div>
            </div>
        </div>
    </div>

    <!-- Question 2 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <strong>2) Even Fibonacci Numbers</strong>
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
                1 and 2, the first 10 terms will be:
                <br /><center><code>1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code></center><br />
                By considering the terms in the Fibonacci sequence whose values do not exceed four million
                <br /><br />
                <button class="pushable" onclick="@EulerTwo">
                    <span class="front">
                        find the sum of the even-valued terms.
                    </span>
                </button>
                <div class="answer">@Euler[1] @elapsedTime[1]</div>
            </div>
        </div>
    </div>

    <!-- Question 3 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                <strong>3) Largest Prime Factor</strong>
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                The prime factors of 13195 are <code>5, 7, 13, 29</code>.
                <br /><br />
                <button class="pushable" onclick="@EulerThree">
                    <span class="front">
                        What is the largest prime factor of the number 600,851,475,143.0
                    </span>
                </button>
                <div class="answer">@EulerLong[2] @elapsedTime[2]</div>
            </div>
        </div>
    </div>
    <!-- Question 4 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingFour">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                <strong>4) Largest Palindrome Product</strong>
            </button>
        </h2>
        <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                A palindromic number reads the same both ways.<br />
                The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
                <br /><br />
                <button class="pushable" onclick="@EulerFour">
                    <span class="front">
                        Find the largest palindrome made from the product of two 3-digit numbers.
                    </span>
                </button>
                <div class="answer">@Euler[3] @elapsedTime[3]</div>
            </div>
        </div>
        <!-- Question 5 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingFive">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                    <strong>5) Smallest Multiple</strong>
                </button>
            </h2>
            <div id="collapseFive" class="accordion-collapse collapse" aria-labelledby="headingFive" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    2520 is the smallest number that can be divided byu each of the numbers from 1 to 10 without any remainder.
                    <br/><br/>
                    <button class="pushable" onclick="@EulerFive">
                        <span class="front">
                            What is the smallest positive number that is <strong>evenly divisible</strong> by all the numbers from 1 to 20
                        </span>
                    </button>
                    <br/>
                    <div class="answer">@EulerLong[4] @elapsedTime[4]</div>
                </div>
            </div>
        </div>
        <!-- Question 6 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSix">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSix" aria-expanded="false" aria-controls="collapseSix">
                    <strong>6) Sum Square Difference</strong>
                </button>
            </h2>
            <div id="collapseSix" class="accordion-collapse collapse" aria-labelledby="headingSix" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    The sum of the squares of the first 10 natural numbers is 1<sup>2</sup> + 2<sup>2</sup> ...  + 10<sup>2</sup> = 385
                    <br /><br />
                    The square of the sum of the first 10 natural numbers is (1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 23025
                    <br/><br/>
                    Hence the difference between the sum of the squares of the first ten natural numbers and 
                    the square of that sum is: 3025 - 385 = 2640.
                    <br/><br/>
                    <button class="pushable" onclick="@EulerSix">
                        <span class="front">
                            Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[5] @elapsedTime[5]</div>
                </div>
            </div>
        </div>
        <!-- Question 7 -------------------------------------------------------------------------->
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingSeven">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSeven" aria-expanded="false" aria-controls="collapseSeven">
                    <strong>7) 10,001<sup>st</sup> Prime</strong>
                </button>
            </h2>
            <div id="collapseSeven" class="accordion-collapse collapse" aria-labelledby="headingSeven" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    By listing the first six prime numbers: 2, 3, 5, 7, 11, 13, we can see that the 6<sup>th</sup> prime is 13.
                    <br/><br/>
                    <button class="pushable" onclick="@EulerSeven">
                        <span class="front">
                            what is he 10,001<sup>th</sup> prime number.
                        </span>
                    </button>
                    <br />
                    <div class="answer">@EulerLong[6] @elapsedTime[6]</div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .answer {
        color: blue;
        padding: 5px;
        font-size: larger;
        border: double;
        border-color: grey;
    }

    .collapsed {
        color: black;
    }

    .accordion-button {
        background-color: hsl(216deg 100% 91%);
        border-color: #A9C5EB;
        color: black;
    }

    .accordion-body {
        background-color: hsl(216deg 100% 91%);
        border-color: #A9C5EB;
    }

    .pushable {
        background: hsl(53deg 25% 50%);
        border-radius: 12px;
        border: none;
        padding: 0;
        cursor: pointer;
        outline-offset: 4px;
    }

    .front {
        display: block;
        padding: 5px;
        border-radius: 12px;
        font-size: 1.25rem;
        background: hsl(52deg 50% 50%);
        color: white;
        transform: translateY(-6px);
    }

    .pushable:active .front {
        transform: translateY(-2px);
    }
</style>

@code {
    private int[] Euler = new int[10];
    private long[] EulerLong = new long[10];
    private string[] elapsedTime = new string[10];

    private void EulerSeven()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();
        int cntPrimes = 0;
        int cnt = 1;
        do
        {
            if (hjvaMath.isPrime(cnt++))
            {
                cntPrimes++;
            }
        } while (cntPrimes <= 10001) ;

        EulerLong[6] = cnt-1;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[6] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }
    private void EulerSix()
    {
        
        Stopwatch sw = new Stopwatch();
        sw.Start();

        long SumOfSquares = 0;
        long SquareOfSums = 0;

        for (int i = 1; i <= 100; i++)
        {
            SumOfSquares += (long)Math.Pow(i, 2);
            SquareOfSums += i;
        }
        SquareOfSums = (long)Math.Pow(SquareOfSums, 2);

        EulerLong[5] = SquareOfSums - SumOfSquares;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[5] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerFive()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        EulerLong[4] = 1;

        List<long> allPrimes = new();
        long[] curPrimes;
        long singleGreatestTerm;

        // 2520 is the value for 1 to 10
        for (int i = 20; i > 0; i--)
        {
            singleGreatestTerm = 0;
            curPrimes = hjvaMath.primeFactors((long)i);
            foreach (long p in curPrimes)
            {
                int cnt = curPrimes.Count(x => x == p);
                if (cnt == 1)
                {
                    if (p > singleGreatestTerm)
                    {
                        singleGreatestTerm = p;
                    }
                }
                else
                {
                    long powered = (long)Math.Pow(p, cnt);
                    if (powered > singleGreatestTerm)
                    {
                        singleGreatestTerm = powered;
                    }
                }
            }
            bool found = false;
            foreach (long aP in allPrimes)
            {
                if (aP == singleGreatestTerm)
                {
                    found = true;
                    break;
                }
                if (aP % singleGreatestTerm == 0)
                {
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                allPrimes.Add(singleGreatestTerm);
            }

        }

        foreach (long lng in allPrimes)
        {
            EulerLong[4] *= lng;
        }

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[4] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

    }
    private void EulerFour()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        int topVal = 0;
        for (int i = 999; i > 0; i--)
        {
            for (int j = 999; j > 0; j--)
            {
                if (hjvaMath.isPalindrome((i * j).ToString()))
                {
                    if (i * j > topVal)
                    {
                        topVal = i * j;
                    }
                }
            }
        }

        Euler[3] = topVal;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[3] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }

    private void EulerThree()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        long[] vals = General.hjvaMath.primeFactors(600851475143);
        long largest = 0;
        foreach (long l in vals)
        {
            if (l > largest)
            {
                largest = l;
            }
        }
        EulerLong[2] = largest;
        //Thread.Sleep(5000);

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[2] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }

    private void EulerTwo()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        Euler[1] = 2;

        int first = 1;
        int second = 2;
        int cur = 0;
        do
        {
            cur = first + second;
            if (cur % 2 == 0)
            {
                Euler[1] += cur;
            }
            first = second;
            second = cur;
        } while (cur <= 4000000);

        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[1] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerOne()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();

        Euler[0] = 0;
        for (int i = 1; i < 1000; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                Euler[0] += i;
            }
        }
        stopWatch.Stop();
        TimeSpan ts = stopWatch.Elapsed;
        elapsedTime[0] = String.Format("{0:00}:{1:0000} sec", ts.Seconds, ts.Milliseconds);
    }
    }
