@page "/Euler/EulerMenu01"
@using System.Diagnostics;

<EulerHeader Title="Euler Page Two"></EulerHeader>
<div class="accordion" id="accordionExample">

    <!-- Question 1 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                <strong>11) Largest Product in a Grid</strong>
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                In the 20 x 20 grid below, four numbers along a diagonal have been marked in red. <br /><br />
                <center>
                    <pre>
                        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
                        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
                        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
                        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
                        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
                        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
                        32 98 81 28 64 23 67 10 <span class="redit">26</span> 38 40 67 59 54 70 66 18 38 64 70
                        67 26 20 68 02 62 12 20 95 <span class="redit">63</span> 94 39 63 08 40 91 66 49 94 21
                        24 55 58 05 66 73 99 26 97 17 <span class="redit">78</span> 78 96 83 14 88 34 89 63 72
                        21 36 23 09 75 00 76 44 20 45 35 <span class="redit">14</span> 00 61 33 97 34 31 33 95
                        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
                        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
                        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
                        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
                        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
                        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
                        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
                        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
                        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
                        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
                    </pre>
                </center>
                The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
                Using all directions of up, down, left, righ, or diagonally...
                <br/><br/>
                <button class="pushable" onclick="@EulerEleven">
                    <span class="front">
                        What is the greatest product of the four adjacent numbers in the same direction.
                    </span>
                </button>
                <div class="answer">
                    @Euler[0] @elapsedTime[0]
                </div>
            </div>
        </div>
    </div>
</div>
<EulerNav />
<style>
    .redit{
        color:red;
    }
</style>
@code {
    private int[] Euler = new int[10];
    private long[] EulerLong = new long[10];
    private string[] elapsedTime = new string[10];

    private void EulerEleven()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();

        const int WINDOW = 4;
        const int SIZE_ARRAY = 20;
        string[] input = new string[SIZE_ARRAY];

        input[0] = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08";
        input[1] = "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00";
        input[2] = "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65";
        input[3] = "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91";
        input[4] = "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80";
        input[5] = "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50";
        input[6] = "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70";
        input[7] = "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21";
        input[8] = "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72";
        input[9] = "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95";
        input[10] = "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92";
        input[11] = "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57";
        input[12] = "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58";
        input[13] = "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40";
        input[14] = "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66";
        input[15] = "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69";
        input[16] = "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36";
        input[17] = "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16";
        input[18] = "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54";
        input[19] = "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";

        int[,] Work = new int[SIZE_ARRAY, SIZE_ARRAY];

        // read data into work array
        for (int i = 0; i < SIZE_ARRAY; i++)
        {
            string[] q = input[i].Split(' ');
            for (int j = 0; j < SIZE_ARRAY; j++)
            {
                Work[i, j] = int.Parse(q[j]);
            }
        }

        int maxTot = 0;
        int curTot;

        // right
        // rows going down
        for (int n = 0; n < SIZE_ARRAY; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY - WINDOW + 1; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n, m + p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }
        // down
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }

        // diaginal down to right
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW + 1; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY - WINDOW + 1; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m + p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }

        // diaginal down to left
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW - 1; n++)
        {
            // cols going across left to right
            for (int m = SIZE_ARRAY - 1; m > WINDOW - 1; m--)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m - p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }


        Euler[0] = maxTot; 

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[0] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

    }
}
