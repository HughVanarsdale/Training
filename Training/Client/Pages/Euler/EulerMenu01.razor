@page "/Euler/EulerMenu01"
@using System;
@using System.Diagnostics;
@using System.Numerics;
@using EulerLib;
@using hjva;

@inject HttpClient Http

<EulerHeader Title="Euler Page Two"></EulerHeader>
<div class="accordion" id="accordionExample">

    <!-- Question 11 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                <strong>11) Largest Product in a Grid</strong>
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                In the 20 x 20 grid below, four numbers along a diagonal have been marked in red. <br /><br />
                <center>
                    <pre>
                        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
                        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
                        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
                        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
                        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
                        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
                        32 98 81 28 64 23 67 10 <span class="redit">26</span> 38 40 67 59 54 70 66 18 38 64 70
                        67 26 20 68 02 62 12 20 95 <span class="redit">63</span> 94 39 63 08 40 91 66 49 94 21
                        24 55 58 05 66 73 99 26 97 17 <span class="redit">78</span> 78 96 83 14 88 34 89 63 72
                        21 36 23 09 75 00 76 44 20 45 35 <span class="redit">14</span> 00 61 33 97 34 31 33 95
                        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
                        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
                        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
                        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
                        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
                        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
                        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
                        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
                        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
                        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
                    </pre>
                </center>
                The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
                Using all directions of up, down, left, righ, or diagonally...
                <br /><br />
                <button class="pushable" onclick="@EulerEleven">
                    <span class="front">
                        What is the greatest product of the four adjacent numbers in the same direction.
                    </span>
                </button>
                <div class="answer">
                    @iEuler[0] @elapsedTime[0]
                </div>
            </div>
        </div>
    </div>

    <!-- Question 12 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwelve">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwelve" aria-expanded="false" aria-controls="collapseTwelve">
                <strong>12) Highly Divisible Triangular Number</strong>
            </button>
        </h2>
        <div id="collapseTwelve" class="accordion-collapse collapse" aria-labelledby="headingTwelve" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                The sequence of triangle numbers is generated by adding the natural numbers. <br />
                So the 7<sup>th</sup> triangle number  would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
                Let us list the factors of the first seven triangle numbers:
                <pre>
                        1: 1
                        3: 1, 3
                        6: 1, 2, 3, 6
                        10: 1, 2, 5, 10
                        15: 1, 3, 5, 15
                        21: 1, 3, 7, 21
                        28: 1,2,4,7,12,28
                    </pre>
                We can see that 28 is the first triangle number to have over five divisors.
                <br /><br />
                <button class="pushable" onclick="@Euler12">
                    <span class="front">
                        What is the value of the first triangle number to have over 500 divisors?
                    </span>
                </button>
                <br />
                <div class="answer">@EulerLong[1] @elapsedTime[1]</div>
            </div>
        </div>
    </div>

    <!-- Question 13 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading13">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse13" aria-expanded="false" aria-controls="collapse13">
                <strong>13) Large Sum</strong>
            </button>
        </h2>
        <div id="collapse13" class="accordion-collapse collapse" aria-labelledby="heading13" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                100 50-digit numbers.
                <pre>
                    37107287533902102798797998220837590246510135740250
                    46376937677490009712648124896970078050417018260538
                    74324986199524741059474233309513058123726617309629
                    91942213363574161572522430563301811072406154908250
                    23067588207539346171171980310421047513778063246676
                    89261670696623633820136378418383684178734361726757
                    281128798128499794080654819315926...
                </pre>
                <br /><br />
                <button class="pushable" onclick="@Euler13">
                    <span class="front">
                        Work out the first 10 digis of he sum of the above numbers.
                    </span>
                </button>
                <br />
                <div class="answer">@EulerString[2] @elapsedTime[2]</div>
            </div>
        </div>
    </div>

    <!-- Question 14 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading14">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse14" aria-expanded="false" aria-controls="collapse14">
                <strong>14) Longest Collatz Sequencee</strong>
            </button>
        </h2>
        <div id="collapse14" class="accordion-collapse collapse" aria-labelledby="heading14" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                The followint iterative sequence is defined for the set of psitive integers:
                <pre>
                    n --> n/2 (n is even)
                    n --> 3n + 1 (n is odd)
                </pre>
                Using the rule above and starting with 13, we generae the following sequence:
                <pre>
                    13 --> 40 --> 20 --> 10 --> 5 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1
                </pre>
                It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
                Althougjh it has not been proven yet (Collatz problem), it is thought that all starting numbers finish at 1.
                <br /><br />
                <button class="pushable" onclick="@Euler14">
                    <span class="front">
                        Which starting number, under one million, produces the longest chain?
                    </span>
                </button>
                <br />
                <div class="answer">@iEuler[3] @elapsedTime[3]</div>
            </div>
        </div>
    </div>

    <!-- Question 15 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading15">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse15" aria-expanded="false" aria-controls="collapse15">
                <strong>15) Lattice Paths</strong>
            </button>
        </h2>
        <div id="collapse15" class="accordion-collapse collapse" aria-labelledby="heading15" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                Starting in the top left corner of a 2 * 2 grid, and only being able to move to the right and down,
                there are exactly routes to the bottom right corner. No idea how this one works.
                <img src="images/euler15.png" />
                <br /><br />
                <button class="pushable" onclick="@Euler15">
                    <span class="front">
                        How many routes are there through a 20 * 20 grid?
                    </span>
                </button>
                <br />
                <div class="answer">@bi @elapsedTime[4]</div>
            </div>
        </div>
    </div>

    <!-- Question 16 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading16">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse16" aria-expanded="false" aria-controls="collapse16">
                <strong>16) Power Digit Sum</strong>
            </button>
        </h2>
        <div id="collapse16" class="accordion-collapse collapse" aria-labelledby="heading16" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
                <br /><br />
                <button class="pushable" onclick="@Euler16">
                    <span class="front">
                        What is the sum of the digits of the number 2<sup>1000</sup>?
                    </span>
                </button>
                <br />
                <div class="answer">@EulerString[5] @elapsedTime[5]</div>
            </div>
        </div>
    </div>
    <!-- Question 17 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading17">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse17" aria-expanded="false" aria-controls="collapse17">
                <strong>17) Number Letter Counts</strong>
            </button>
        </h2>
        <div id="collapse17" class="accordion-collapse collapse" aria-labelledby="heading17" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                If the numbers 1 to 5 are written out in words: one, two, three, four, five, 
                then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
                <br /><br />
                <button class="pushable" onclick="@Euler17">
                    <span class="front">
                        For all numbers between 1 and 1000, how many letters would be used.
                    </span>
                </button>
                <br />
                <div class="answer">@iEuler[6] @elapsedTime[6]</div>
            </div>
        </div>
    </div>
    <!-- Question 18 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading18">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse18" aria-expanded="false" aria-controls="collapse18">
                <strong>18) Maximum Path Sum 1</strong>
            </button>
        </h2>
        <div id="collapse18" class="accordion-collapse collapse" aria-labelledby="heading18" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                By starting at the top of the triangle below and moving to adjacent numbers on the row below, 
                the maximum total from top to bottom is 23
                <center><pre>
                     3
                    7 4
                   2 4 6
                  8 5 9 3
                </pre></center>
                That is 3 + 7 + 4 + 9 = 23.
                <center><pre>
                    75
                    95 64
                    17 47 82
                    18 35 87 10
                    20 04 82 47 65
                    19 01 23 75 03 34
                    88 02 77 73 07 63 67
                    99 65 04 28 06 16 70 92
                    41 41 26 56 83 40 80 70 33
                    41 48 72 33 47 32 37 16 94 29
                    53 71 44 65 25 43 91 52 97 51 14
                    70 11 33 28 77 73 17 78 39 68 17 57
                    91 71 52 38 17 14 91 43 58 50 27 29 48
                    63 66 04 68 89 53 67 30 73 16 69 87 40 31
                    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
                </pre></center>
                <br /><br />
                <button class="pushable" onclick="@Euler18">
                    <span class="front">
                        Find the maximum total from the triangle above. 
                    </span>
                </button>
                <br />
                <div class="answer">@iEuler[7] @elapsedTime[7]</div>
            </div>
        </div>
    </div>
    <!-- Question 19 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading19">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse19" aria-expanded="false" aria-controls="collapse19">
                <strong>19) Counting Sundays</strong>
            </button>
        </h2>
        <div id="collapse19" class="accordion-collapse collapse" aria-labelledby="heading19" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                You are given the following information, but you may prefer to do some research for yourself.
                <ul>
                    <li>
                        1 Jan 1900 was a Monday.
                    </li>
                    <li>
                        Thirty days has September,<br/>
                        April, June and November.<br />
                        All the rest have thirty-one,<br />
                        Saving February alone,<br />
                        Which has twenty-eight, rain or shine.<br />
                        And on leap years, twenty-nine.<br />
                    </li>
                    <li>
                        A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
                    </li>
                </ul>
                <br /><br />
                <button class="pushable" onclick="@Euler19">
                    <span class="front">
                        How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
                    </span>
                </button>
                <br />
                <div class="answer">@iEuler[8] @elapsedTime[8]</div>
            </div>
        </div>
    </div>

    <!-- Question 20 -------------------------------------------------------------------------->
    <div class="accordion-item">
        <h2 class="accordion-header" id="heading20">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse20" aria-expanded="false" aria-controls="collapse20">
                <strong>20) Factorial Digit Sum</strong>
            </button>
        </h2>
        <div id="collapse20" class="accordion-collapse collapse" aria-labelledby="heading20" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                n! means x (n - 1)x...x 3 x 2 x 1.<br/>
                For example 10! = 10 x 9 x ... 3 x 2 x 1 = 3628800<br/>
                and the sum of the digits in the number 10! = 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
                <br /><br />
                <button class="pushable" onclick="@Euler20">
                    <span class="front">
                        Find the sum of the digits in the number 100!
                    </span>
                </button>
                <br />
                <div class="answer">@iEuler[9] @elapsedTime[9]</div>
            </div>
        </div>
    </div>
</div>

<EulerNav />

<style>
    .redit {
        color: red;
    }
</style>

@code {
    private int[] iEuler = new int[10];
    private long[] EulerLong = new long[10];
    private string[] elapsedTime = new string[10];
    private string[] EulerString = new string[10];
    private BigInteger bi=0; 

    private void Euler20()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        // run 100! , then add up digits 
        string addemup = "1";
        for (int i = 100; i >= 1; i--)
        {
            addemup = hjvaMath.MultiplyTwoStrings(addemup, i.ToString());
        }

        // convert string result to integer
        int cntVals = 0;
        foreach (char c in addemup)
        {
            int val = c - '0';
            cntVals += val;
        }
        iEuler[9] = cntVals;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[9] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void Euler19()
    {
        /*
        * 1 Jan 1900 was a Monday.
        * How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
        */
        Stopwatch sw = new Stopwatch();
        sw.Start();

        DateTime begDate = DateTime.Parse("Jan 1, 1900");
        DateTime endDate;
        int cntSundays = 0;
        string[] months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

        // for each year
        for (int x = 1901; x <= 2000; x++)
        {
            // for each month
            for (int y = 0; y <= 11; y++)
            {
                // format string date
                string sDate = ($"{months[y]} 1, {x}");
                // convert string date to DateTime format
                endDate = DateTime.Parse(sDate);
                // find the number of days betweend stand and end dates
                int days = (endDate - begDate).Days;
                // if Monday is 0 offset (from begin date), then Sunday is 6 offset
                if (days % 7 == 6)
                {
                    cntSundays++;
                }
            }
        }

        iEuler[8] = cntSundays;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[8] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private async Task Euler18()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        string[]? data;

        // get data from server
        string param = "Euler18.txt";
        data = await Http.GetFromJsonAsync<string[]>($"api/ReadText/{param}");

        // set up matrix size
        int[,] matrix = new int[data.Length, data.Length];

        // set up string array to hold each data cell
        string[] lineSplit = new string[data.Length];

        // for each row of input data
        for (int i = 0; i < data.Length; i++)
        {
            // split input line into array
            lineSplit = data[i].Split(' ');
            // put string cell into int cell in matrix
            for (int j =0; j < lineSplit.Length; j++)
            {
                matrix[i, j] = int.Parse(lineSplit[j].Trim());
            }
        }
        
        // find max path sum
        iEuler[7] = EulerLib.Problems.MaximumPathSum(matrix);
        

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[7] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void Euler17()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        Dictionary<int, string> numWords = new();
        numWords.Add(1, "one");
        numWords.Add(2, "two");
        numWords.Add(3, "three");
        numWords.Add(4, "four");
        numWords.Add(5, "five");
        numWords.Add(6, "six");
        numWords.Add(7, "seven");
        numWords.Add(8, "eight");
        numWords.Add(9, "nine");
        numWords.Add(10, "ten");
        numWords.Add(11, "eleven");
        numWords.Add(12, "twelve");
        numWords.Add(13, "thirteen");
        numWords.Add(14, "fourteen");
        numWords.Add(15, "fifteen");
        numWords.Add(16, "sixteen");
        numWords.Add(17, "seventeen");
        numWords.Add(18, "eighteen");
        numWords.Add(19, "nineteen");
        numWords.Add(20, "twenty");
        numWords.Add(30, "thirty");
        numWords.Add(40, "fourty");
        numWords.Add(50, "fifty");
        numWords.Add(60, "sixty");
        numWords.Add(70, "seventy");
        numWords.Add(80, "eighty");
        numWords.Add(90, "ninty");
        numWords.Add(100, "hundred");
        numWords.Add(1000, "thousand");

        int totChars = 0;
        int divisor;
        string line;

        // for all numbers between 1 & 1000
        for (int i = 1; i <= 1000; i++)
        {
            line = "";              // hold english spelling of number
            int working = i;        // working value of i
            while (working > 0)
            {
                // check if number is 1000
                if (working >= 1000)
                {
                    divisor = working / 1000;       // find how many thousands
                    line += numWords.First(x => x.Key == divisor).Value + "thousand";
                    working -= 1000 * divisor;      // subtract 1000's from working int
                }
                if (working >= 100)
                {
                    // find how many hundreds
                    divisor = working / 100;
                    // add spelling for how many hundreds and the hundred
                    line += numWords.First(x => x.Key == divisor).Value + "hundred";
                    // subtract value just spelled out
                    working -= 100 * divisor;
                    // in requirements
                    if (working > 0)
                    {
                        line += "and";
                    }
                }
                if (working >= 20)
                {
                    divisor = working / 10;
                    line += numWords.First(x => x.Key == (divisor * 10)).Value;
                    working -= 10 * divisor;
                }
                if (working > 0 && working < 20)
                {
                    line += numWords.First(x => x.Key == working).Value;
                    working = 0;
                }
            }
            totChars += line.Length;
        }
        iEuler[6] = totChars;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[6] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void Euler16()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        // pretty staight forward
        // find sum of digits for 2^1000

        // do math to find value put in sVal
        string sVal = "1";
        for (int i = 0; i < 1000; i++)
        {
            sVal = hjva.hjvaMath.MultiplyTwoStrings(sVal, "2");
        }

        // foreach char in sVal, add together to get grand total
        string sRet = "0";
        foreach (char c in sVal)
        {
            sRet = hjvaMath.AddTwoStrings(sRet, c.ToString());
        }

        EulerString[5] = sRet;
        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[5] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

    }

    private void Euler15()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        // use this formula. 
        // has to do with Pascal's pyramid
        // (2 X n) ! / n! n!
        int matrixSide = 20;

        BigInteger size = hjvaMath.Factorial(matrixSide);
        BigInteger numer = hjvaMath.Factorial(2 * matrixSide);
        BigInteger ret = numer / (size * size);

        bi = ret;
        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[4] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void Euler14()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        int termsCnt = 0;
        int maxTerms = 0;
        long workingVal = 0;
        int maxStartingNum = 1;
        bool done = false;
        int[] savedTerms = new int[1000000];

        //we do not need to compute the chain for any k ≤ LIMIT / 2.
        //In this case, we do not need to compute the chain for any k below 500000.
        for (int i = 500000; i < 1000000; i++)
        {
            if (i % 10000 == 0)
            {
                Console.Write("*");
            }
            workingVal = i;
            termsCnt = 0;
            done = false;
            do
            {
                // use array so don't have to recalculte. Didn't make a big time difference.
                if (savedTerms[i] != 0)
                {
                    termsCnt += savedTerms[i];
                    done = true;
                }
                else
                // do math
                {
                    if (workingVal % 2 == 0)
                    {
                        workingVal /= 2;
                    }
                    else
                    {
                        workingVal = (3 * workingVal) + 1;
                    }
                    termsCnt++;
                }
            } while (workingVal > 1 && !done);

            savedTerms[i] = termsCnt;

            if (termsCnt > maxTerms)
            {
                maxTerms = termsCnt;
                maxStartingNum = i;
            }
        }
        iEuler[3] = maxStartingNum;
        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[3] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private async Task Euler13()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();


        string param = "Euler13.txt";
        string[]? data = await Http.GetFromJsonAsync<string[]>($"api/ReadText/{param}");

        string sTotal = "0";

        foreach (string d in data)
        {
            sTotal = hjvaMath.AddTwoStrings(sTotal, d);
        }


        EulerString[2] = sTotal.Substring(0, 10);

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[2] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    public void Euler12()
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();

        long triangle = 0;
        long cnt = 0;
        long[] factors;

        // first loop to find Triangle numbers
        do
        {
            cnt++;
            triangle += cnt;

            factors = hjvaMath.AllFactors(triangle);


        } while (factors.Length <= 500);

        EulerLong[1] = triangle;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[1] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");
    }

    private void EulerEleven()
    {

        Stopwatch sw = new Stopwatch();
        sw.Start();

        const int WINDOW = 4;
        const int SIZE_ARRAY = 20;
        string[] input = new string[SIZE_ARRAY];

        input[0] = "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08";
        input[1] = "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00";
        input[2] = "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65";
        input[3] = "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91";
        input[4] = "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80";
        input[5] = "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50";
        input[6] = "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70";
        input[7] = "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21";
        input[8] = "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72";
        input[9] = "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95";
        input[10] = "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92";
        input[11] = "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57";
        input[12] = "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58";
        input[13] = "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40";
        input[14] = "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66";
        input[15] = "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69";
        input[16] = "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36";
        input[17] = "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16";
        input[18] = "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54";
        input[19] = "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48";

        int[,] Work = new int[SIZE_ARRAY, SIZE_ARRAY];

        // read data into work array
        for (int i = 0; i < SIZE_ARRAY; i++)
        {
            string[] q = input[i].Split(' ');
            for (int j = 0; j < SIZE_ARRAY; j++)
            {
                Work[i, j] = int.Parse(q[j]);
            }
        }

        int maxTot = 0;
        int curTot;

        // right
        // rows going down
        for (int n = 0; n < SIZE_ARRAY; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY - WINDOW + 1; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n, m + p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }
        // down
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }

        // diaginal down to right
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW + 1; n++)
        {
            // cols going across
            for (int m = 0; m < SIZE_ARRAY - WINDOW + 1; m++)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m + p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }

        // diaginal down to left
        // rows going down
        for (int n = 0; n < SIZE_ARRAY - WINDOW - 1; n++)
        {
            // cols going across left to right
            for (int m = SIZE_ARRAY - 1; m > WINDOW - 1; m--)
            {
                curTot = 1;
                for (int p = 0; p < WINDOW; p++)
                {
                    curTot *= Work[n + p, m - p];
                }
                if (curTot > maxTot)
                {
                    maxTot = curTot;
                }
            }
        }


        iEuler[0] = maxTot;

        sw.Stop();
        TimeSpan ts = sw.Elapsed;
        elapsedTime[0] = String.Format($"{ts.Seconds:00}:{ts.Milliseconds:0000} sec");

    }
}
